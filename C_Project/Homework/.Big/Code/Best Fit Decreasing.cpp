#include <bits/stdc++.h>
#include <time.h> // 包含时间库头文件，用于计时
using namespace std;
void bestFitDecreasing(int s[], int n, int c)
{
    // 初始化箱子状态，使用 calloc 初始化所有元素为 0
    int *bins = (int *)calloc(n, sizeof(int));
    // 记录使用的箱子数
    int binsUsed = 0;
    int i, j, bestIndex;
<<<<<<< HEAD

    cout << "物品顺序:" << endl;
=======
    // 对物品按大小降序排序
    sort(s,s+n,greater<int>());//使用STL自带的sort减小排序带来的时间误差
    cout << "排序后的物品顺序:" << endl;
>>>>>>> 7e56557d9608df7db08f6effdc5221cd9bbeda75
    for (i = 0; i < n; i++)
    {
        cout << s[i] << " ";
    }
    cout << endl;
    // 遍历物品并尝试放入箱子
    for (i = 0; i < n; i++)
    {
        // 记录最佳箱子的索引
        bestIndex = -1;
        // 记录最佳剩余空间差，初始化为比箱子容量还大的值
        int bestDiff = c + 1;
        // 查找最佳箱子
        for (j = 0; j < binsUsed; j++)
        {
            int diff = c - bins[j] - s[i];
            // 如果当前箱子剩余空间足够且剩余空间比当前最佳剩余空间小，更新最佳箱子
            if (diff >= 0 && diff < bestDiff)
            {
                bestDiff = diff;
                bestIndex = j;
            }
        }
        // 如果找到了最佳箱子
        if (bestIndex != -1)
        {
            bins[bestIndex] += s[i]; // 放入物品
            cout << "第" << i + 1 << "个物品放在第" << bestIndex + 1 << "个箱子" << endl;
        }
        else
        { // 否则开新箱子
            bins[binsUsed++] = s[i];
            cout << "第" << i + 1 << "个物品放在第" << binsUsed << "个箱子" << endl;
        }
    }
    // 输出结果
    cout << "需要 " << binsUsed << "个箱子" << endl;
    free(bins); // 释放内存
}
int main()
{
<<<<<<< HEAD
=======
    // 物品大小
    int s[] = {20, 46, 70, 50, 63, 43, 28, 21, 32, 36, 5, 53, 56, 26, 63, 52, 57, 48, 52, 51, 67, 38, 18, 30, 46, 18, 51, 8, 13, 32, 16, 48, 20, 41, 41, 19, 51, 25, 13, 32, 34, 15, 52, 37, 45, 27, 4, 42, 49, 58, 23, 57, 48, 54, 50, 26, 48, 66, 65, 70, 47, 47, 25, 59, 34, 50, 6, 42, 2, 31, 21, 48, 26, 22, 56, 37, 48, 70, 51, 14, 28, 19, 53, 59, 33, 7, 36, 24, 65, 44, 55, 25, 12, 21, 62, 18, 44, 29, 12, 3, 24, 34, 24, 70, 16, 52, 51, 21, 33, 13, 67, 57, 41, 17, 13, 3, 62, 67, 63, 53, 43, 54, 61, 61, 42, 34, 70, 46, 16, 40, 62, 58, 31, 69, 33, 16, 20, 55, 57, 51, 42, 24, 16, 13, 61, 61, 21, 68, 42, 1, 61, 55, 62, 23, 43, 17, 37, 50, 13, 51, 58, 28, 54, 22, 66, 8, 49, 8, 47, 26, 57, 61, 3, 5, 62, 41, 53, 54, 64, 52, 70, 56, 59, 4, 23, 44, 30, 7, 12, 45, 29, 29, 25, 13, 28, 11, 27, 54, 46, 69, 38, 17, 16, 3, 58, 43, 6, 64, 62, 65, 53, 68, 57, 26, 22, 22, 21, 3, 60, 5, 41, 11, 41, 70, 36, 35, 63, 46, 15, 47, 67, 2, 24, 30, 1, 54, 21, 24, 12, 47, 49, 48, 7, 9, 16, 70, 19, 4, 55, 12, 5, 51, 15, 32, 66, 70, 36, 6, 48, 38, 70, 17, 38, 64, 58, 6, 39, 68, 2, 60, 5, 70, 20, 1, 52, 62, 3, 7, 32, 40, 51, 9, 10, 58, 56, 67, 48, 65, 50, 58, 8, 29, 14, 5, 47, 63, 57, 55, 39, 9, 6, 12, 24, 30, 37, 60, 23, 20, 35, 27, 1, 5, 35, 36, 69, 12, 33, 13, 52, 54, 5, 42, 1, 45, 6, 38, 13, 12, 41, 63, 1, 18, 50, 68, 64, 43, 45, 63, 55, 54, 11, 28, 36, 41, 52, 70, 56, 5, 59, 30, 29, 44, 38, 65, 5, 25, 25, 58, 7, 4, 40, 57, 31, 21, 12, 61, 41, 16, 31, 47, 56, 33, 26, 8, 19, 25, 20, 19, 67, 20, 58, 11, 19, 49, 67, 31, 63, 55, 61, 11, 26, 56, 16, 54, 31, 55, 7, 35, 21, 11, 19, 10, 27, 40, 59, 65, 60, 59, 35, 15, 58, 36, 42, 33, 17, 49, 11, 36, 16, 25, 7, 59, 57, 10, 7, 66, 6, 46, 26, 7, 4, 30, 41, 64, 35, 32, 35, 10, 28, 43, 28, 40, 15, 11, 53, 44, 44, 56, 46, 1, 20, 20, 60, 63, 63, 13, 40, 65, 54, 56, 39, 67, 30, 35, 5, 39, 7, 19, 31, 5, 55, 54, 13, 36, 49, 21, 35, 25, 38, 31, 63, 42, 3, 52, 6, 31, 22, 4, 60, 27, 25, 30, 50, 65, 55, 69, 8, 36, 25, 61};
    // 物品数量
    int n = sizeof(s) / sizeof(s[0]);
    // 箱子容量
    int c = 100;
>>>>>>> 7e56557d9608df7db08f6effdc5221cd9bbeda75
    // 定义时间变量
    clock_t start, end;
    double time_used;
    // 记录开始时间
    start = clock();
<<<<<<< HEAD
    // 物品大小
    int s[] = {47, 48, 49, 1, 14, 49, 46, 6, 45, 37, 47, 22, 22, 3, 2, 16, 44, 20, 3, 34};
    // 物品数量
    int n = sizeof(s) / sizeof(s[0]);
    // 箱子容量
    int c = 50;

    // 使用STL自带的sort减小排序带来的时间误差
    // sort(s, s + n, greater<int>());

=======
>>>>>>> 7e56557d9608df7db08f6effdc5221cd9bbeda75
    bestFitDecreasing(s, n, c);
    // 记录结束时间
    end = clock();
    // 计算运行时间
    time_used = (double)(end - start) / CLOCKS_PER_SEC;
    cout << "运行时间为" << time_used << "秒" << endl;
    return 0;
}